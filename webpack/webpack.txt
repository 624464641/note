1.webpack 是模块打包工具 ， 给予node的打包工具 ，是用node实现的

	 创建一个 node项目
	  1. npm init 
	  2. "private" : true,  设置为自己私有的npm
	  3. "main": "index.js", 不需要暴露出来一个js文件 
	  安装webpack 
	   npm install webpack webpack-cli -D (--save-dev)
	   指定版本号安装webpack
	   npm install webpack@4.16.4 webpack-cli -D
	  4. 查看项目中webpack的版本号为 npx webpack -v

 2. webpack文件配置
	   1.webpack的默认打包文件为webpack.config.js 
	   需要切换配置文件执行命令为 npx webpack --config webpackconfig.js (需要切换的webpack的默认打包文件)
	   2.简化打包命令
	   "scripts": {
	    build 想当于执行 webpack 命令 所以执行npm run build 则 可以执行打包 替换 npx webpack
	    "build" :"webpack"
	  },
	    // 打包模式 production 文件被压缩为一行  development 文件不被压缩
		mode : "development",

 3.webpack实践 
	  1. loader 
	    在webpack中 loader的配置是有顺序的  ， 执行顺序为 从右->左 ，从下->上
	  2. 打包字体文件
	        要加载file-loader 打包文件
	  3. 适用plugins打包
       安装html 的打包plugins    npm install --save-dev html-webpack-plugin
	      htmlwebpackplugin 会生成一个html文件并且自动会把webpack打包生成的js文件引入到html中
	      plugin 可以在webpack运行到某个时刻时帮你做一些事情 在某些节点上需要做一些事情
	      CleanWebpackPlugin 在配置时需要  const {CleanWebpackPlugin}  = require('clean-webpack-plugin')
	      变量第一个字母需要大写   在plugin ： [ 不能配置参数]
4.entry 和 output
          1. 打包对应的多文件
          在entry 中配置多个key
          修改output中的feilenaem ： [name].js (name 为entry中的key)

5. sourcesMap
     1.是一个映射关系 当js文件出错是 可以直接映射到源文件的出错文件
6.devserver 
     1. 在执行完启动命令时打开打包后的html文件 到浏览器
     安装devserver npm install webpack-dev-server -D
     2.编写自己的node server.js
     安装 npm install express webpack-dev-middleware -D
 7. webpack热模块更新 - hot-module repacement

 8.bable es6 编译为es6的处理
	 安装bable与webpack通信的loader
	 npm install --save-dev babel-loader @babel/core
	 安装bable 的es6转化为es5的loader
	 npm install @babel/preset-env --save-dev  
	 @babel/preset-env 只会翻译一部分es6代码  还需要 @babel/polyfill
	 安装 
	 //  使用库项目时需要 @babel/plugin-transform-runtime插件
	 npm install --save-dev @babel/plugin-transform-runtime
	 npm install --save @babel/runtime
	 修改 bable的options{
	   "plugins": [["@babel/plugin-transform-runtime"],
	      {
	        "corejs": 2,
	        "helpers": true,
	        "regenerator": true,
	        "useESModules": false,
	      }
	   ]
	 }
	 当corejs 修改为2时  需要安装 npm install --save @babel/runtime-corejs2
	 transform-runtime 不会污染全局的信息而 polyfill 会污染


  9.tree shaking

	  当其他文件中引入另外一个文件时 并且没有用到其他未引入的方法  会全部打包
	  tree shaking 只支持es Moudel 的引入
	  development 默认不支持 tree skaing 需要下面optimization 配置
	   // 配置 tree saking 
	   optimization :{
	   	//  设置 导出的模块被使用再打包 没有使用的不进行打包
	      useExports: true
	   },
	   还需要在package.json中 配置 sideEffects" : false, 
	   但是在 production中 不需要配置 optimization  但是需要配置 sideEffects" : false,

  10.devlopment 和 production 模式区别
	   抽取common.js放公共的代码  分别给dev个prod使用 所以使用到
	   webpack-merge
	   安装 npm install webpack-merge -D

   11. webpacl 和 code spliting关系

   12. 代码分割： 

    1.同步代码分割：只需要在webpack.common.js中做optimization的配置
    2.异步代码分割：（import） 异步代码无需做任何处理，会自动进行代码分割

   13.lazy loading 懒加载 ， chunk 

   14.打包分析 preloading prefetching

     1.coverage 谷歌浏览器性能分析工具
     2. 异步加载 在网络空闲时会加载 
     /* webpackPrefetch: true */ 

   15. css 代码分割
      只支持线上环境  不支持html
      MiniCssExtractPlugin 插件

